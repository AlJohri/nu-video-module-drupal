<?php

//    require_once 'ffmpeg-php/FFmpegAutoloader.php';
//    $movie = new FFmpegMovie($item['url']);
//    
//    $movie->getDuration();
//    $movie->getVideoCodec();
//    $movie->getAudioCodec();
//    $movie->getFrameRate(); 
//    $movie->getFrameHeight();
//    $movie->getFrameWidth();

// http://www.longtailvideo.com/support/jw-player/jw-player-for-flash-v5/12536/configuration-options



define('VIDEO_URL_MAX_LENGTH', 2048); // must match value in nuamps_video.install

define('PROTOCOLS', 'http|https|rtmp');
define('FORMATS', 'mov|flv');

define('DEFAULT_WIDTH', 640);
define('DEFAULT_HEIGHT', 360);
define('DEFAULT_CLASS', 'nuamps-video');
define('DEFAULT_FALLBACK', 'flash'); // flash, html
define('DEFAULT_OVERRIDE', 'false'); // false, true
define('DEFAULT_AUTOSTART', 'false'); // false, true
define('DEFAULT_DISPLAY_SHOWMUTE', 'false'); // false, true
define('DEFAULT_CONTROLBAR_POSITION', 'bottom'); // bottom, top, over, none

/**
 * Implements hook_help().
 *
 * Adds help information for the nuamps_video module.
 */
function nuamps_video_help($path, $arg) {
    switch ($path) {
        case 'admin/help#nuamps_video': {
            $ret_val  = '<h3>' . t('About') . '</h3>';
            $ret_val .= '<p>' . t('The NUAMPS Video module allows a user to
              input the URL of a video stream and embed the video within using
              JWplayer') . '</p>';
            return $ret_val;
        }
    }
}

/**
 * Implements hook_field_info().
 *
 * Creates custom field NUAMPS Video.
 */
function nuamps_video_field_info() {
  return array(
    'nuamps_video_field' => array(
      'label' => t('NUAMPS Video'),
      'description' => t('Store a width, height, and URL in the database to
        assemble a video.'), 
      'settings' => array('max_length' => 2048),
      'default_widget' => 'nuamps_video_field',
      'default_formatter' => 'nuamps_video_default',
      'instance_settings' => array(
        'width' => DEFAULT_WIDTH, // changes width of video
        'height' => DEFAULT_HEIGHT, // changes height of video
        'image' => '', // changes the image shown before the video is played
        'class' => DEFAULT_CLASS, // the div class that surrounds the video
        'fallback' => DEFAULT_FALLBACK, // either html5 or flash. 
                                        // the fallback kicks in when the default 
                                        // is not available
        'override' => DEFAULT_OVERRIDE,
        'autostart' => DEFAULT_AUTOSTART,
        'showmute' => DEFAULT_DISPLAY_SHOWMUTE,
        'controlbar_position' => DEFAULT_CONTROLBAR_POSITION,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function nuamps_video_field_widget_info() {
  return array(
      'nuamps_video_field' => array(
        'label' => 'NUAMPS Video',
        'field types' => array('nuamps_video_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Shows the form when you edit/create new content with the NUAMPS Video field.
 */
function nuamps_video_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implements hook_field_instance_settings_form().
 *
 * Adds settings for the NUAMPS Video field specific to an instance (or content type).
 */
function nuamps_video_field_instance_settings_form($field, $instance) {
  $instance_settings = $instance['settings'];
  $form = array();

  $form['#element_validate'] = array('nuamps_video_field_instance_settings_form_validate');

  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('JWPlayer Width'),
    '#default_value' => $instance_settings['width'],
    '#description' => t('Enter a width for the video.'),
  );

  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('JWPlayer Height'),
    '#default_value' => $instance_settings['height'],
    '#description' => t('Enter a height for the video.'),
  );

  $form['image'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Image'),
    '#default_value' => $instance_settings['image'],
    '#description' => t('Image URL.'),
  );

  $form['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional CSS Class'),
    '#default_value' => $instance_settings['class'],
    '#description' => t('When output, this video will have this class attribute.
      Multiple classes should be separated by spaces.'),
  );

  $form['fallback'] = array(
    '#type' => 'radios',
    '#title' => t('Fallback format if the default format does not work.'),
    '#options' => array(
      'flash' => t('Flash (Default = HTML5, Fallback = Flash)'),
      'html' => t('HTML5 (Default = Flash, Fallback = HTML5)')
      ),
    '#default_value' => $instance_settings['fallback'],
  );

  $form['override'] = array(
    '#type' => 'radios',
    '#title' => t('Allow individual content to override content type settings.'),
    '#options' => array(
      'true' => t('Allow override'),
      'false' => t('Do not allow override')
      ),
    '#default_value' => $instance_settings['override'],
  );

  $form['autostart'] = array(
    '#type' => 'radios',
    '#title' => t('Autostart video on load.'),
    '#options' => array(
      'true' => t('Autostart'),
      'false' => t('Do not autostart')
      ),
    '#default_value' => $instance_settings['autostart'],
  );

  $form['showmute'] = array(
    '#type' => 'radios',
    '#title' => t('Show mute symbol when video is paused instead of the play symbol.'),
    '#options' => array(
      'true' => t('Allow showmute'),
      'false' => t('Do not allow showmute')
      ),
    '#default_value' => $instance_settings['showmute'],
  );

  $form['controlbar_position'] = array(
    '#type' => 'radios',
    '#title' => t('Change controlbar position.'),
    '#options' => array(
      'bottom' => t('bottom'),
      'top' => t('top'),
      'over' => t('over'),
      'none' => t('none')
      ),
    '#default_value' => $instance_settings['controlbar_position'],
  );

  return $form;
}

/**
 * Validation for field instance form.
 * 
 * 'element_validate' for nuamps_video_field_instance_settings_form
 */
function nuamps_video_field_instance_settings_form_validate($element, &$form_state) {
  // validate: width, height, image, class
  // do not validate: fallback, override, autostart, showmute, controlbar_position
  
  $settings = $form_state['values']['instance']['settings'];
  
  if (!isset($settings['width'])) form_set_error('width', 'The width must be set.');
  if (!isset($settings['height'])) form_set_error('height', 'The height must be set.');
  if (!isset($settings['image'])) form_set_error('image', 'The image must be set.');
  if (!isset($settings['class'])) form_set_error('class', 'The image must be class.');
  if (!is_numeric($settings['width'])) form_set_error('width', 'The width must be numeric');
  if (!is_numeric($settings['height'])) form_set_error('width', 'The height must be numeric');
  if ($settings['width'] < 0) form_set_error('width', 'The width must be greater than 0.');
  if ($settings['height'] < 0) form_set_error('height', 'The height must be greater than 0.');

}

/**
 * Implements hook_field_validate().
 *
 * Validate field values and error if user adds wrong values
 */
function nuamps_video_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // validate: width, height, image, class
  // do not validate: fallback, autostart, showmute, controlbar_position
  
  $settings = $instance['settings']; // This has been validated in nuamps_video_field_settings_form_validate.
    
  // To support multiple values, loop through $items.
  foreach ($items as $delta => $value) {
   $element = $items[$delta];
   if ($element['url'] && !preg_match("#^(" . PROTOCOLS . ")://.+(" . FORMATS . ")#", $element['url'])){     
     $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'url_format_invalid', 
        'message' => t('The url format is invalid.'),
      );     
   }   
   if ($settings['override'] == "true") {
    
    if (!isset($element['width'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'width_not_set', 
        'message' => t('The weight must be set.'),
      );
    }
    if (!isset($element['height'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'height_not_set', 
        'message' => t('The height must be set.'),
      );
    }
    if (!isset($element['image'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'image_not_set', 
        'message' => t('The image must be set.'),
      );
    }
    if (!is_numeric($element['width'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'width_not_numeric', 
        'message' => t('The width must be numeric.'),
      );      
    }
    if (!is_numeric($element['height'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'height_not_numeric', 
        'message' => t('The height must be numeric.'),
      );      
    }
    
    if ($element['width'] <= 0) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'width_not_positive', 
        'message' => t('The width must be greater than 0.'),
      );
    }
    if ($element['height'] <= 0) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'height_not_positive', 
        'message' => t('The height must be greater than 0.'),
      );      
    }
   }
  }
}

/**
* Implements hook_field_widget_error().
*/
function nuamps_video_field_widget_error($element, $error, $form, &$form_state) {
  preg_match('/[^_.]*/', $error['error'], $match);
  $sub_element = $element[$match[0]];
  form_error($sub_element, $error['message']);
}

/**
 * Implement hook_field_is_empty().
 * 
 * 
 */
function nuamps_video_field_is_empty($item, $field) {
  return empty($item['url']);
}

/**
 * Implements hook_field_presave().
 */
function nuamps_video_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $value) {
    $item = $items[$delta];
    // Trim whitespace from URL.
    $item['url'] = trim($item['url']);
  }
}

/**
 * Implements hook_theme().
 */
function nuamps_video_theme($existing, $type, $theme, $path) {
  return array(
    'nuamps_video_formatter_nuamps_video_default' => array('variables' => array('element' => NULL)),
    'nuamps_video_field' => array('render element' => 'element'),
  );
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_nuamps_video_field($vars) {
  $element = $vars['element'];
  $output  = '';
  $output .= '<div class="nuamps-video-field-subrow clearfix">';
  $output .= '<div class="nuamps-video-field-url">' . drupal_render($element['url']) . '</div>';
  $output .= '<div class="nuamps-video-field-rtmp-url">' . drupal_render($element['rtmp_url']) . '</div>';
  if (isset($element['width'])) $output .= '<div class="nuamps-video-field-width">' . drupal_render($element['width']) . '</div>';
  if (isset($element['height'])) $output .= '<div class="nuamps-video-field-height">' . drupal_render($element['height']) . '</div>';
  if (isset($element['image'])) $output .= '<div class="nuamps-video-field-image">' . drupal_render($element['image']) . '</div>';
  if (isset($element['class'])) $output .= '<div class="nuamps-video-field-class">' . drupal_render($element['class']) . '</div>';
  if (isset($element['fallback'])) $output .= '<div class="nuamps-video-field-fallback">' . drupal_render($element['fallback']) . '</div>';
  if (isset($element['autostart'])) $output .= '<div class="nuamps-video-field-autostart">' . drupal_render($element['autostart']) . '</div>';
  if (isset($element['showmute'])) $output .= '<div class="nuamps-video-field-showmute">' . drupal_render($element['showmute']) . '</div>';
  if (isset($element['controlbar_position'])) $output .= '<div class="nuamps-video-field-controlbar_position">' . drupal_render($element['controlbar_position']) . '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_element_info().
 */
function nuamps_video_element_info() {
  $elements = array();
  $elements['nuamps_video_field'] =  array(
    '#input' => TRUE,
    '#process' => array('nuamps_video_field_process'),
    '#theme' => 'nuamps_video_field',
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Process the video type element before displaying the field.
 *
 */
function nuamps_video_field_process($element, $form_state, $complete_form) {

  $instance = field_widget_instance($element, $form_state);
  $instance_settings = $instance['settings'];

  $element['url'] = array(
    '#type' => 'textfield',
    '#maxlength' => VIDEO_URL_MAX_LENGTH,
    '#title' => t('URL'),
    '#description' => t('Enter URL for jwplayer.'),
    '#required' => TRUE,
    '#default_value' => isset($element['#value']['url']) ? $element['#value']['url'] : NULL,
  );
  
  $element['rtmp_url'] = array(
    '#type' => 'textfield',
    '#maxlength' => VIDEO_URL_MAX_LENGTH,
    '#title' => t('RTMP URL'),
    '#description' => t('Enter RTMP URL for jwplayer.'),
    '#required' => FALSE,
    '#default_value' => isset($element['#value']['rtmp_url']) ? $element['#value']['rtmp_url'] : NULL,
  );

  if ($instance_settings['override'] == "true") {

    $element['width'] = array(
      '#type' => 'textfield',
      '#title' => t('JWPlayer Width'),
      '#default_value' => isset($element['#value']['width']) ? $element['#value']['width'] : $instance_settings['width'],
      '#description' => t('Enter a width for the video.'),
    );

    $element['height'] = array(
      '#type' => 'textfield',
      '#title' => t('JWPlayer Height'),
      '#default_value' => isset($element['#value']['height']) ? $element['#value']['height'] : $instance_settings['height'],
      '#description' => t('Enter a height for the video.'),
    );

    $element['image'] = array(
      '#type' => 'textfield',
      '#title' => t('Default Image'),
      '#default_value' => isset($element['#value']['image']) ? $element['#value']['image'] : $instance_settings['image'],
      '#description' => t('Image URL.'),
    );

    $element['class'] = array(
      '#type' => 'textfield',
      '#title' => t('Additional CSS Class'),
      '#default_value' => isset($element['#value']['class']) ? $element['#value']['class'] : $instance_settings['class'],
      '#description' => t('When output, this video will have this class attribute. Multiple classes should be separated by spaces.'),
    );

    $element['fallback'] = array(
      '#type' => 'radios',
      '#title' => t('Fallback'),
      '#options' => array('flash' => t('Flash (Default = HTML5, Fallback = Flash)'), 'html' => t('HTML5 (Default = Flash, Fallback = HTML5)')),
      '#default_value' => isset($element['#value']['fallback']) ? $element['#value']['fallback'] : $instance_settings['fallback'],
    );

    $element['autostart'] = array(
      '#type' => 'radios',
      '#title' => t('Autostart'),
      '#options' => array('true' => t('Allow autostart'), 'false' => t('Do not allow autostart')),
      '#default_value' => isset($element['#value']['autostart']) ? $element['#value']['autostart'] : $instance_settings['autostart'],
    );

    $element['showmute'] = array(
      '#type' => 'radios',
      '#title' => t('Showmute'),
      '#options' => array('true' => t('Allow showmute'), 'false' => t('Do not allow showmute')),
      '#default_value' => isset($element['#value']['showmute']) ? $element['#value']['showmute'] : $instance_settings['showmute'],
    );

    $element['controlbar_position'] = array(
      '#type' => 'radios',
      '#title' => t('Controlbar Position'),
      '#options' => array('bottom' => t('bottom'), 'top' => t('top'), 'over' => t('over'), 'none' => t('none')),
      '#default_value' => isset($element['#value']['controlbar_position']) ? $element['#value']['controlbar_position'] : $instance_settings['controlbar_position'],
    );

  }

  // To prevent an extra required indicator, disable the required flag on the
  // base element since all the sub-fields are already required if desired.
  $element['#required'] = FALSE;

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function nuamps_video_field_formatter_info() {
  return array(
    'nuamps_video_default' => array(
      'label' => t('NUAMPS Video'),
      'field types' => array('nuamps_video_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function nuamps_video_field_formatter_view($entity_type, $entity, $field, 
    $instance, $langcode, $items, $display) {
  $elements = array();

  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('nuamps_video_formatter_' . $display['type'], 
          array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Theme function for 'default' text field formatter.
 */
function theme_nuamps_video_formatter_nuamps_video_default($vars) {
  static $containerID = 0;
  $containerID++;

  $field_settings = $vars['field']['settings'];
  $override_settings = $vars['element'];

  // If override is set but no values are entered, use field settings.
  $settings = $field_settings['override'] == 'true' && count(array_filter($override_settings)) > 1 ?  $override_settings : $field_settings;

  drupal_add_js(base_path() . "sites/all/libraries/" . "jwplayer/jwplayer.js", 'file');

  $flash = '{ type: "flash", src: "' . base_path() . "sites/all/libraries/" . 'jwplayer/player.swf" }';
  $html  = '{ type: "html5", config: { provider: "video", file: "' . $vars['element']['url'] . '"}}';

  $output  = '<video id="container' . $containerID . '" src="' . $vars['element']['url'] . '" style="z-index:1000;" controls="visible">Loading the player ...</video>';
  $output .= '<script>
                jwplayer("container' . $containerID . '").setup({
                  \'file\': "'  .  $vars['element']['url'] . '",
                  \'height\': "' .  $settings['height'] . '",
                  \'width\': "'  .  $settings['width'] . '",
                  \'image\': "'  .  $settings['image'] . '",
                  \'controlbar.position\': "' . $settings['controlbar_position'] . '",
                  \'display.showmute\': "' . $settings['showmute'] . '",
                  \'autostart\': "' . $settings['autostart'] . '",
                  \'modes\': [';
  $output .= $settings['fallback'] == 'flash' ? $html . ",\n" . $flash : $flash . ",\n" . $html;
  $output .=      ']
                });
              </script>';
  $output .= '<div class="overlay"></div>';
  $output .= '<style>
              div.overlay {
                //opacity:0.9;
                //background-color:#000;
                background: rgba(0, 0, 0, 0.9); 
                width:100%;
                height:100%;
                z-index:100;
                top:0;
                left:0;
                position:fixed; 
                visibility:hidden;
                pointer-events:none;
              }
              </style>';
  $output .= "<a class= 'toggleOverlay' style='position:relative; z-index:1000;' href=\"javascript:
                
                document.getElementById('container" . $containerID . "_wrapper').style.zIndex = 1000;
                
                if (document.getElementsByClassName('overlay')[0].style.visibility == 'visible') {
                  document.getElementsByClassName('overlay')[0].style.visibility = 'hidden';
                  document.getElementsByClassName('toggleOverlay')[0].innerHTML = 'Cinema Mode';
                }
                else {
                  document.getElementsByClassName('overlay')[0].style.visibility = 'visible';
                  document.getElementsByClassName('toggleOverlay')[0].innerHTML = 'Regular Mode';
                }
                
              \" >Cinema Mode</a>";

  return $output;
}

/*
 * Implements hook_form_alter().
 * 
 * Removes the description and default value widget to make the settings form
 * prettier.
 */
function nuamps_video_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form)) {
      if ($form['#id'] == 'field-ui-field-edit-form'
          && $form['#field']['module'] == 'nuamps_video') {
        unset($form['instance']['default_value_widget']);
        unset($form['instance']['description']);
      }
  }
}

/*
 * Implements hook_views_api().
 * 
 * Enables creation of views from the video field.
 */
function nuamps_video_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'nuamps_video') . '/views',
  );
}