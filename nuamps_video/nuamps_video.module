<?php


/*
 * TODO
 *
 * Create checbox to allow user to override width and height for
 * specific content.
 *
 * Create radio button for user to select default/fallback format.
 *
 * Comment!
 *
 *
 * INSTANCE SETTINGS nuamps_video_field_instance_settings_form
 * ELEMENT: nuamps_video_field_process
 *
 *
 */

//define('HOOK', 'nuamps_video');
define('VIDEO_URL_MAX_LENGTH', 2048); // must match value in nuamps_video.install
define('DEFAULT_WIDTH', 640);
define('DEFAULT_HEIGHT', 360);
define('DEFAULT_CLASS', 'nuamps-video');
define('DEFAULT_FALLBACK', 'flash'); // flash, html
define('DEFAULT_OVERRIDE', 'false'); // false, true
define('DEFAULT_AUTOSTART', 'false'); // false, true
define('DEFAULT_DISPLAY_SHOWMUTE', 'false'); // false, true
define('DEFAULT_CONTROLBAR_POSITION', 'bottom'); // bottom, top, over, none

/**
 * Implements hook_help().
 *
 * Adds help information for the nuamps_video module.
 */
function nuamps_video_help($path, $arg) {
    switch ($path) {
        case 'admin/help#nuamps_video': {
            $ret_val  = '<h3>' . t('About') . '</h3>';
            $ret_val .= '<p>' . t('The nuamps_video module allows a user to 
              input the URL of an RTMP video stream and embed the video within 
              the Content using JWplayer') . '</p>';
            return $ret_val;
        }
    }
}

/**
 * Implements hook_field_info().
 *
 * Makes stuff appear in dropdown Menu when creating New Fields
 */
function nuamps_video_field_info() {
  return array(
    'nuamps_video_field' => array(
      'label' => t('NUAMPS Video'),
      'description' => t('Store a width, height, and URL in the database to 
        assemble a video.'),
      'settings' => array('max_length' => 2048),
      'default_widget' => 'nuamps_video_field',
      'default_formatter' => 'nuamps_video_default',
      'instance_settings' => array(
        'width' => DEFAULT_WIDTH,
        'height' => DEFAULT_HEIGHT,
        'image' => '',
        'class' => DEFAULT_CLASS,
        'fallback' => DEFAULT_FALLBACK,
        'override' => DEFAULT_OVERRIDE,
        'autostart' => DEFAULT_AUTOSTART,
        'showmute' => DEFAULT_DISPLAY_SHOWMUTE,
        'controlbar_position' => DEFAULT_CONTROLBAR_POSITION,
        //'enable_tokens' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 *
 * Makes settings specific to content types
 */
function nuamps_video_field_instance_settings_form($field, $instance) {
  $instance_settings = $instance['settings'];
  $form = array();

  $form['#element_validate'] = array('nuamps_video_field_settings_form_validate');

  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('JWPlayer Width'),
    '#default_value' => $instance_settings['width'],
    '#description' => t('Enter a width for the video.'),
  );

  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('JWPlayer Height'),
    '#default_value' => $instance_settings['height'],
    '#description' => t('Enter a height for the video.'),
  );

  $form['image'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Image'),
    '#default_value' => $instance_settings['image'],
    '#description' => t('Image URL.'),
  );

  $form['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional CSS Class'),
    '#default_value' => $instance_settings['class'],
    '#description' => t('When output, this video will have this class attribute. 
      Multiple classes should be separated by spaces.'),
  );

  $form['fallback'] = array(
    '#type' => 'radios',
    '#title' => t('Fallback'),
    '#options' => array(
      'flash' => t('Flash (Default = HTML5, Fallback = Flash)'), 
      'html' => t('HTML5 (Default = Flash, Fallback = HTML5)')
      ),
    '#default_value' => $instance_settings['fallback'],
  );

  $form['override'] = array(
    '#type' => 'radios',
    '#title' => t('Override'),
    '#options' => array(
      'true' => t('Allow override'), 
      'false' => t('Do not allow override')
      ),
    '#default_value' => $instance_settings['override'],
  );

  $form['autostart'] = array(
    '#type' => 'radios',
    '#title' => t('Autostart'),
    '#options' => array(
      'true' => t('Allow autostart'), 
      'false' => t('Do not allow autostart')
      ),
    '#default_value' => $instance_settings['autostart'],
  );

  $form['showmute'] = array(
    '#type' => 'radios',
    '#title' => t('Show Mute'),
    '#options' => array(
      'true' => t('Allow showmute'), 
      'false' => t('Do not allow showmute')
      ),
    '#default_value' => $instance_settings['showmute'],
  );

  $form['controlbar_position'] = array(
    '#type' => 'radios',
    '#title' => t('Controlbar Position'),
    '#options' => array(
      'bottom' => t('bottom'), 
      'top' => t('top'), 
      'over' => t('over'), 
      'none' => t('none')
      ),
    '#default_value' => $instance_settings['controlbar_position'],
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Validate field values and error if user adds wrong values
 */
function nuamps_video_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $optional_field_found = FALSE;

  foreach ($items as $delta => $value) {
//    ($items[$delta], $delta, $field, $entity, $instance, $optional_field_found);
//     check if WIDTH AND FIELD ARE NOT ZERO
        //form_set_error($field['field_name'] .']['. $delta .'][url', t('Not a valid URL.'));
        //form_set_error($instance['field_name'] .'][0][title', t('At least one title or URL must be entered.'));

  }

    if (!isset($instance['settings']['width'])) { form_set_error($field['field_name'] .'][0][width', t('The width must be set.')); }
    if (!isset($instance['settings']['height'])) { form_set_error($field['field_name'] .'][0][height', t('The height must be set.')); }
    if (!is_numeric($instance['settings']['width'])) { form_set_error($field['field_name'] .'][0][width', t('The width must be numeric.')); }
    if (!is_numeric($instance['settings']['height'])) { form_set_error($field['field_name'] .'][0][height', t('The height must be numeric.')); }
    if ($instance['settings']['width'] < 0) { form_set_error($field['field_name'] .'][0][width', t('The width must be greater than 0 .')); }
    if ($instance['settings']['height'] < 0) { form_set_error($field['field_name'] .'][0][height', t('The height must be greater than 0 .')); }
}

/**
 * Validate the field settings form.
 */
function nuamps_video_field_settings_form_validate($element, &$form_state, $complete_form) {

  // if ($element['url'] && !preg_match("#^(http|rtmp)://.+(mov|flv)#", $element['url']))
  //   form_set_error('url', t('The URL format is not valid.'));
  // // check 404

  if (!isset($form_state['values']['instance']['settings']['width'])) {
    form_set_error('width', t('The width must be set.'));
  }
  elseif (!isset($form_state['values']['instance']['settings']['height'])) {
    form_set_error('height', t('The height must be set.'));
  }
  elseif (!is_numeric($form_state['values']['instance']['settings']['width'])) {
    form_set_error('width', t('The width must be numeric.'));
  }
  elseif (!is_numeric($form_state['values']['instance']['settings']['height'])) {
    form_set_error('height', t('The height must be numeric.'));
  }
  elseif ($form_state['values']['instance']['settings']['width'] < 0) {
    form_set_error('width', t('The width must be greater than 0 .'));
  }
  elseif ($form_state['values']['instance']['settings']['height'] < 0) {
    form_set_error('height', t('The height must be greater than 0 .'));
  }

}

/**
 * Implement hook_field_is_empty().
 */
function nuamps_video_field_is_empty($item, $field) {
  return empty($item['url']);
}

/**
 * Implements hook_field_presave().
 */
function nuamps_video_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
//  foreach ($items as $delta => $value) {
//    $item = $items[$delta];
    // Trim whitespace from URL.
    //$item['url'] = trim($item['url']);
//  }
}

/**
 * Implements hook_field_widget_info().
 */
function nuamps_video_field_widget_info() {
  return array(
    'nuamps_video_field' => array(
      'label' => 'NUAMPS Video',
      'field types' => array('nuamps_video_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * Shows the form when you edit/create new content with the nuamps video field.
 */
function nuamps_video_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implements hook_theme().
 */
function nuamps_video_theme($existing, $type, $theme, $path) {
  return array(
    'nuamps_video_formatter_nuamps_video_default' => array(
      'variables' => array('element' => NULL),
    ),
    'nuamps_video_field' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_nuamps_video_field($vars) {
  $element = $vars['element'];
  $output  = '';
  $output .= '<div class="nuamps-video-field-subrow clearfix">';
  $output .= '<div class="nuamps-video-field-url">' . drupal_render($element['url']) . '</div>';
  if (isset($element['width'])) $output .= '<div class="nuamps-video-field-width">' . drupal_render($element['width']) . '</div>';
  if (isset($element['height'])) $output .= '<div class="nuamps-video-field-height">' . drupal_render($element['height']) . '</div>';
  if (isset($element['image'])) $output .= '<div class="nuamps-video-field-image">' . drupal_render($element['image']) . '</div>';
  if (isset($element['class'])) $output .= '<div class="nuamps-video-field-class">' . drupal_render($element['class']) . '</div>';
  if (isset($element['fallback'])) $output .= '<div class="nuamps-video-field-fallback">' . drupal_render($element['fallback']) . '</div>';
  if (isset($element['autostart'])) $output .= '<div class="nuamps-video-field-autostart">' . drupal_render($element['autostart']) . '</div>';
  if (isset($element['showmute'])) $output .= '<div class="nuamps-video-field-showmute">' . drupal_render($element['showmute']) . '</div>';
  if (isset($element['controlbar_position'])) $output .= '<div class="nuamps-video-field-controlbar_position">' . drupal_render($element['controlbar_position']) . '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_element_info().
 */
function nuamps_video_element_info() {
  $elements = array();
  $elements['nuamps_video_field'] =  array(
    '#input' => TRUE,
    '#process' => array('nuamps_video_field_process'),
    '#theme' => 'nuamps_video_field',
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}



/**
 * Process the video type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function nuamps_video_field_process($element, $form_state, $complete_form) {

  $instance = field_widget_instance($element, $form_state);
  $instance_settings = $instance['settings'];

  $element['url'] = array(
    '#type' => 'textfield',
    '#maxlength' => VIDEO_URL_MAX_LENGTH,
    '#title' => t('URL'),
    '#description' => t('Enter URL for jwplayer.'),
    '#required' => TRUE,
    '#default_value' => isset($element['#value']['url']) ? $element['#value']['url'] : NULL,
  );

  if ($instance_settings['override'] == "true") {
    
    $element['width'] = array(
      '#type' => 'textfield',
      '#title' => t('JWPlayer Width'),
      '#default_value' => isset($element['#value']['width']) ? $element['#value']['width'] : $instance_settings['width'],
      '#description' => t('Enter a width for the video.'),
    );

    $element['height'] = array(
      '#type' => 'textfield',
      '#title' => t('JWPlayer Height'),
      '#default_value' => isset($element['#value']['height']) ? $element['#value']['height'] : $instance_settings['height'],
      '#description' => t('Enter a height for the video.'),
    );

    $element['image'] = array(
      '#type' => 'textfield',
      '#title' => t('Default Image'),
      '#default_value' => isset($element['#value']['image']) ? $element['#value']['image'] : $instance_settings['image'],
      '#description' => t('Image URL.'),
    );

    $element['class'] = array(
      '#type' => 'textfield',
      '#title' => t('Additional CSS Class'),
      '#default_value' => isset($element['#value']['class']) ? $element['#value']['class'] : $instance_settings['class'],
      '#description' => t('When output, this video will have this class attribute. Multiple classes should be separated by spaces.'),
    );

    $element['fallback'] = array(
      '#type' => 'radios',
      '#title' => t('Fallback'),
      '#options' => array('flash' => t('Flash (Default = HTML5, Fallback = Flash)'), 'html' => t('HTML5 (Default = Flash, Fallback = HTML5)')),
      '#default_value' => isset($element['#value']['fallback']) ? $element['#value']['fallback'] : $instance_settings['fallback'],
    );

    $element['autostart'] = array(
      '#type' => 'radios',
      '#title' => t('Autostart'),
      '#options' => array('true' => t('Allow autostart'), 'false' => t('Do not allow autostart')),
      '#default_value' => isset($element['#value']['autostart']) ? $element['#value']['autostart'] : $instance_settings['autostart'],
    );

    $element['showmute'] = array(
      '#type' => 'radios',
      '#title' => t('Showmute'),
      '#options' => array('true' => t('Allow showmute'), 'false' => t('Do not allow showmute')),
      '#default_value' => isset($element['#value']['showmute']) ? $element['#value']['showmute'] : $instance_settings['showmute'],
    );

    $element['controlbar_position'] = array(
      '#type' => 'radios',
      '#title' => t('Controlbar Position'),
      '#options' => array('bottom' => t('bottom'), 'top' => t('top'), 'over' => t('over'), 'none' => t('none')),
      '#default_value' => isset($element['#value']['controlbar_position']) ? $element['#value']['controlbar_position'] : $instance_settings['controlbar_position'],
    );

  }

  // To prevent an extra required indicator, disable the required flag on the
  // base element since all the sub-fields are already required if desired.
  $element['#required'] = FALSE;

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function nuamps_video_field_formatter_info() {
  return array(
    'nuamps_video_default' => array(
      'label' => t('NUAMPS Video'),
      'field types' => array('nuamps_video_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function nuamps_video_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();

  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('nuamps_video_formatter_' . $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Theme function for 'default' text field formatter.
 */
function theme_nuamps_video_formatter_nuamps_video_default($vars) {
  static $containerID = 0;
  $containerID++;
  
  $field_settings = $vars['field']['settings'];
  $override_settings = $vars['element'];
  
  // If override is set but no values are entered, use field settings.
  $settings = $field_settings['override'] == 'true' && count(array_filter($override_settings)) > 1 ?  $override_settings : $field_settings;

  drupal_add_js(base_path() . "sites/all/libraries/" . "jwplayer/jwplayer.js", 'file');

  $flash = '{ type: "flash", src: "' . base_path() . "sites/all/libraries/" . 'jwplayer/player.swf" }';
  $html  = '{ type: "html5", config: { provider: "video", file: "' . $vars['element']['url'] . '"}}';

  $output  = '<video id="container' . $containerID . '" src="' . $vars['element']['url'] . '" style="z-index: 11000" controls="visible">Loading the player ...</video>';
  $output .= '<script>
                jwplayer("container' . $containerID . '").setup({
                  \'file\': "'  .  $vars['element']['url'] . '",
                  \'height\': "' .  $settings['height'] . '",
                  \'width\': "'  .  $settings['width'] . '",
                  \'image\': "'  .  $settings['image'] . '",
                  \'controlbar.position\': "' . $settings['controlbar_position'] . '",
                  \'display.showmute\': "' . $settings['showmute'] . '",
                  \'autostart\': "' . $settings['autostart'] . '",
                  \'modes\': [';
  $output .= $settings['fallback'] == 'flash' ? $html . ",\n" . $flash : $flash . ",\n" . $html;
  $output .=      ']
                });
              </script>';

  return $output;
}

function nuamps_video_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form)) {
      if ($form['#id'] == 'field-ui-field-edit-form'
          && $form['#field']['module'] == 'nuamps_video') {
        unset($form['instance']['default_value_widget']);
        unset($form['instance']['description']);
      }
  }
}

function nuamps_video_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'nuamps_video') . '/views',
  );
}

/******************************************************************************/

//function hook_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
//  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
//  foreach ($items as $delta => $item) {
//    // For hook_file_references(), remember that this is being deleted.
//    $item['file_field_name'] = $field['field_name'];
//    // Pass in the ID of the object that is being removed so all references can
//    // be counted in hook_file_references().
//    $item['file_field_type'] = $entity_type;
//    $item['file_field_id'] = $id;
//    file_field_delete_file($item, $field, $entity_type, $id);
//  }
//}

///**
// * Implements hook_field_settings_form().
// *
// * Makes global settings for field
// */
//function nuamps_video_field_settings_form($field, $instance, $has_data) {
//  $settings = $field['settings'];
//  $form['max_length'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Maxium length'),
//    '#default_value' => $settings['max_length'],
//    '#required' => TRUE,
//    '#description' => t('The maximum length of the field in characters.'),
//  );
//  return $form;
//}